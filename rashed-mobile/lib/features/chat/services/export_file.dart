import 'dart:io';

import 'package:flutter/services.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:intl/intl.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:open_filex/open_filex.dart';
import 'package:rashed/core/resources/app_images_path.dart';
import 'package:rashed/core/utils/app_toast.dart';

import '../../../core/utils/storage_permission.dart';

Future<void> exportAndSavePdf({
  required String question,
  required String response,
}) async {
  try {
    // Generate the PDF
    final pdf = pw.Document();
    final now = DateTime.now();
    final formattedDate = DateFormat('M/d/yyyy, h:mm:ss a').format(now);

    final memoryImage = await assetImageToMemoryImage(AppImages.logo);

    pdf.addPage(
      pw.MultiPage(
        build: (pw.Context context) => [
          pw.Center(child: pw.Image(memoryImage, width: 100)),
          pw.SizedBox(height: 20),
          pw.Center(
            child: pw.Text(
              'Rashed\'s Report',
              textAlign: pw.TextAlign.center,
              style: pw.TextStyle(fontSize: 24, fontWeight: pw.FontWeight.bold),
            ),
          ),
          pw.SizedBox(height: 10),
          pw.Center(
            child: pw.Text(
              'Chatbot Response Report',
              textAlign: pw.TextAlign.center,
              style: pw.TextStyle(fontSize: 18, fontWeight: pw.FontWeight.bold),
            ),
          ),
          pw.SizedBox(height: 30),
          pw.Header(
            level: 2,
            child: pw.Text('Asked Question',
                style: pw.TextStyle(fontSize: 16, fontWeight: pw.FontWeight.bold)),
          ),
          pw.Paragraph(text: question, style: const pw.TextStyle(fontSize: 14)),
          pw.SizedBox(height: 20),
          pw.Header(
            level: 2,
            child: pw.Text('Bot Response',
                style: pw.TextStyle(fontSize: 16, fontWeight: pw.FontWeight.bold)),
          ),
          pw.Paragraph(text: response, style: const pw.TextStyle(fontSize: 14)),
          pw.SizedBox(height: 60),
          pw.Center(
            child: pw.Text(
              'Generated by Rashed\'s Chatbot on $formattedDate',
              textAlign: pw.TextAlign.center,
              style: const pw.TextStyle(fontSize: 10, color: PdfColors.grey600),
            ),
          ),
        ],
      ),
    );

    // Save to custom directory with permission handling
    await _savePdfToDevice(await pdf.save());

  } catch (e) {
    AppToast.toast(msg: 'Error generating PDF: $e');
  }
}

Future<void> _savePdfToDevice(Uint8List pdfBytes) async {
  try {
    // Request storage permission

    final granted = await checkStoragePermission();
    if (!granted) {
      throw Exception('Storage permission not granted');
    }

    // Create custom directory if it doesn't exist
    Directory directory = Directory('/storage/emulated/0/Documents/Rashed');
    if (!directory.existsSync()) {
      await directory.create(recursive: true);
    }

    // Save the file
    String path = '${directory.path}/report-${DateTime.now().millisecondsSinceEpoch}.pdf';
    File file = File(path);
    await file.writeAsBytes(pdfBytes);

    // Show success message
    AppToast.toast(msg: 'PDF saved to /Documents/Rashed');

    // Open the file
    await _openFile(path);
  } catch (e) {
    AppToast.toast(msg: 'Error saving PDF: $e');
  }
}

Future<void> _openFile(String filePath) async {
  try {
    // Request manage external storage permission for Android 11+
    if (await Permission.manageExternalStorage.isDenied) {
      await Permission.manageExternalStorage.request();
    }

    final result = await OpenFilex.open(filePath);

    if (result.type != ResultType.done) {
      AppToast.toast(msg: 'Error opening file: ${result.message}');
    }
  } catch (e) {
    AppToast.toast(msg: 'Error opening file: $e');
  }
}

Future<pw.MemoryImage> assetImageToMemoryImage(String assetPath) async {
  try {
    // Load the asset as a byte array
    final ByteData byteData = await rootBundle.load(assetPath);

    // Convert ByteData to Uint8List
    final Uint8List bytes = byteData.buffer.asUint8List();

    // Create MemoryImage from bytes
    return pw.MemoryImage(bytes);
  } catch (e) {
    throw Exception('Failed to load asset image: $e');
  }
}
